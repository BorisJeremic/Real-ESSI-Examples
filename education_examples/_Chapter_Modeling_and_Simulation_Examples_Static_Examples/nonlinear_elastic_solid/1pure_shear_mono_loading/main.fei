// 
// Real ESSI Simulator
// Modeling and Simulation Examples
// for more information, see: http://real-essi.info
// 



model name "DP";
add material # 1 type Duncan_Chang_nonlinear_elastic_isotropic_3d 
    mass_density = 2E3 * kg/m^3 
    initial_elastic_modulus = 3E5 * Pa 
    poisson_ratio= 0.15
    DuncanChang_K = 1E3  
    DuncanChang_pa = 1E5 * Pa  
    DuncanChang_n = 0.5  ;
add node # 1 at (0*m,0*m,1*m)  with 3 dofs;
add node # 2 at (1*m,0*m,1*m)  with 3 dofs;
add node # 3 at (1*m,1*m,1*m)  with 3 dofs;
add node # 4 at (0*m,1*m,1*m)  with 3 dofs;
add node # 5 at (0*m,0*m,0*m)  with 3 dofs;
add node # 6 at (1*m,0*m,0*m)  with 3 dofs;
add node # 7 at (1*m,1*m,0*m)  with 3 dofs;
add node # 8 at (0*m,1*m,0*m)  with 3 dofs;
add element # 1 type 8NodeBrick using 2 Gauss points each direction with nodes (1, 2, 3, 4, 5, 6, 7, 8) use material # 1;
new loading stage "1Confine" ;
fix node # 5 dofs all;
fix node # 1 dofs ux uy;
fix node # 6 dofs uy uz;
fix node # 8 dofs ux uz;
fix node # 7 dofs uz; 
fix node # 2 dofs uy;
fix node # 4 dofs ux; 
press = 1000 * Pa;
add load # 1 to node # 1 type linear Fz = - press *m^2 ;
add load # 2 to node # 2 type linear Fz = - press *m^2 ;
add load # 3 to node # 3 type linear Fz = - press *m^2 ;
add load # 4 to node # 4 type linear Fz = - press *m^2 ;
add load # 5 to node # 5 type linear Fz = press *m^2 ;
add load # 6 to node # 6 type linear Fz = press *m^2 ;
add load # 7 to node # 7 type linear Fz = press *m^2 ;
add load # 8 to node # 8 type linear Fz = press *m^2 ;
add load #  9 to node # 1 type linear Fx = press *m^2 ;
add load # 10 to node # 4 type linear Fx = press *m^2 ;
add load # 11 to node # 8 type linear Fx = press *m^2 ;
add load # 12 to node # 5 type linear Fx = press *m^2 ;
add load # 13 to node # 2 type linear Fx = - press *m^2 ;
add load # 14 to node # 3 type linear Fx = - press *m^2 ;
add load # 15 to node # 6 type linear Fx = - press *m^2 ;
add load # 16 to node # 7 type linear Fx = - press *m^2 ;
add load # 17 to node # 1 type linear Fy = press *m^2 ;
add load # 18 to node # 2 type linear Fy = press *m^2 ;
add load # 19 to node # 6 type linear Fy = press *m^2 ;
add load # 20 to node # 5 type linear Fy = press *m^2 ;
add load # 21 to node # 3 type linear Fy = - press *m^2 ;
add load # 22 to node # 7 type linear Fy = - press *m^2 ;
add load # 23 to node # 8 type linear Fy = - press *m^2 ;
add load # 24 to node # 4 type linear Fy = - press *m^2 ;
define solver UMFPack;
define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 1
    maximum_iterations =  10
    ;
define algorithm Newton;
Nstep = 10;
define load factor increment 1/Nstep;
simulate Nstep steps using static algorithm;
bye;  
