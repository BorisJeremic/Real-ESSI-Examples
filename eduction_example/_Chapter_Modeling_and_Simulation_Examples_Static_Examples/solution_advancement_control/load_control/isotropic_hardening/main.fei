// 
// Real ESSI Simulator
// Modeling and Simulation Examples
// for more information, see: http://real-essi.info
// 



model name "vm";
add material # 1 type vonMises
    mass_density = 0.0*kg/m^3
    elastic_modulus = 2E7*N/m^2
    poisson_ratio = 0.0
    von_mises_radius = 8E4*Pa
    kinematic_hardening_rate = 0*Pa
    isotropic_hardening_rate = 2E6*Pa;
add node # 1 at (0*m,0*m,1*m)  with 3 dofs;
add node # 2 at (1*m,0*m,1*m)  with 3 dofs;
add node # 3 at (1*m,1*m,1*m)  with 3 dofs;
add node # 4 at (0*m,1*m,1*m)  with 3 dofs;
add node # 5 at (0*m,0*m,0*m)  with 3 dofs;
add node # 6 at (1*m,0*m,0*m)  with 3 dofs;
add node # 7 at (1*m,1*m,0*m)  with 3 dofs;
add node # 8 at (0*m,1*m,0*m)  with 3 dofs;
add element # 1 type 8NodeBrick using 2 Gauss points each direction with nodes (1, 2, 3, 4, 5, 6, 7, 8) use material # 1;
fix node # 5 dofs all;
fix node # 6 dofs uy uz;
fix node # 8 dofs ux uz;
new loading stage "2shearing";
fix node # 5 dofs all;
fix node # 6 dofs all;
fix node # 7 dofs all;
fix node # 8 dofs all;
free node # 1 dofs ux uy uz;
free node # 2 dofs ux uy uz;
free node # 3 dofs ux uy uz;
free node # 4 dofs ux uy uz;
fix node # 1 dofs uy uz ;
fix node # 2 dofs uy uz ;
fix node # 3 dofs uy uz ;
fix node # 4 dofs uy uz ;
add load # 101 to node # 1 type linear Fx =  2E4 * N;
add load # 102 to node # 2 type linear Fx =  2E4 * N;
add load # 103 to node # 3 type linear Fx =  2E4 * N;
add load # 104 to node # 4 type linear Fx =  2E4 * N;
define solver UMFPack;
define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 10
    maximum_iterations =  50
    ;
define algorithm Newton;
define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;
Nsteps = 1000;
target_disp = 4E-4;
define load factor increment 1/Nsteps;
simulate Nsteps steps using static algorithm;
new loading stage "3unloading";
add load # 105 to node # 1 type linear Fx =  -3E4 * N;
add load # 106 to node # 2 type linear Fx =  -3E4 * N;
add load # 107 to node # 3 type linear Fx =  -3E4 * N;
add load # 108 to node # 4 type linear Fx =  -3E4 * N;
define solver UMFPack;
define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 10
    maximum_iterations =  50
    ;
define algorithm Newton ;
define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;
Nsteps = 1000;
define load factor increment 1/Nsteps;
simulate 2*Nsteps steps using static algorithm;
new loading stage "4reloading" ;
add load # 115 to node # 1 type linear Fx =  4.8E4 * N;
add load # 116 to node # 2 type linear Fx =  4.8E4 * N;
add load # 117 to node # 3 type linear Fx =  4.8E4 * N;
add load # 118 to node # 4 type linear Fx =  4.8E4 * N;
define solver UMFPack;
define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 10
    maximum_iterations =  50
    ;
define algorithm Newton ;
define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;
Nsteps = 1000;
define load factor increment 1/Nsteps;
simulate 2*Nsteps steps using static algorithm;
bye;  
