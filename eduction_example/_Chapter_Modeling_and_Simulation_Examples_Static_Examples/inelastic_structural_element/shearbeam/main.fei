// model name "name_string";
model name "VMAF";

gamma_max = 3e-3;

add node # 1 at (0*m,0*m,0*m)  with 3 dofs;
add node # 2 at (0*m,0*m,1*m)  with 3 dofs;

fix node # 1 dofs all;
fix node # 2 dofs uy;


// add material # 1 type PisanoLT
// 	mass_density = 2000*kg/m^3
// 	elastic_modulus_1atm =  325*MPa
// 	poisson_ratio =  0.3
// 	M_in =  1.4
// 	kd_in =  0.0  //0.7
// 	xi_in =  0.0  //0.1
// 	h_in =  700
// 	m_in =  0.7
// 	initial_confining_stress =  0*kPa
// 	n_in = 0//-0.229
// 	a_in = 0.0 
// 	eplcum_cr_in = 1e-6;


rho = 0.0*kg/m^3;
nu = 0.0;
E = 2E7*N/m^2;
//
phi   = 5;
phirad = pi*phi/180;
eta = 6*sin(phirad)/(3-sin(phirad));
// Define the material:
add material # 1 type vonMisesArmstrongFrederick
    mass_density = rho
    elastic_modulus = E
    poisson_ratio = nu
    von_mises_radius = 100 * Pa
    armstrong_frederick_ha = E
    armstrong_frederick_cr = 1000 
    isotropic_hardening_rate = 0*Pa
    ;


add element # 1 type ShearBeam with nodes (1, 2) 
	cross_section = 1*m^2 use material # 1;


	


// new loading stage "name_string";
new loading stage "confinement";

// add load # <.> to node # <.> type linear FORCETYPE = <force or moment>; //FORCETYPE = Fx Fy Fz Mx My Mz F_fluid_x F_fluid_y F_fluid_z
add load # 1 to node # 2 type linear 
	Fz = -200*kN;


	
define load factor increment 0.01;
define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 0.1
    maximum_iterations =  50
    ;
define algorithm Newton;
define solver  UMFPack;
define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;
simulate 100 steps using static algorithm;



new loading stage "test01";


// add imposed motion # <.> to node # <.> dof DOFTYPE time_step = <t> displacement_scale_unit = <length> displacement_file = "filename" velocity_scale_unit = <velocity> velocity_file = "filename" acceleration_scale_unit = <acceleration> acceleration_file = "filename";
add imposed motion # 2 to node # 2 dof ux
	displacement_scale_unit =  gamma_max*m
	displacement_file =  "input_sine.txt"
	velocity_scale_unit =  gamma_max*m/s
	velocity_file =  "input_sine.txt"
	acceleration_scale_unit =  gamma_max*m/s^2
	acceleration_file = "input_sine.txt";

define NDMaterial constitutive integration algorithm Backward_Euler
    yield_function_relative_tolerance =  1E-7
    stress_relative_tolerance =  1E-7
    maximum_iterations = 100;
define load factor increment 0.0005;

define convergence test Absolute_Norm_Unbalanced_Force
    tolerance = 0.1
    maximum_iterations =  50
    ;
define algorithm Newton;

define solver  UMFPack;

simulate 1250 steps using static algorithm;

bye;


	

	




	