
model name "Verification_Of_Static_Normal_Contact" ;

init_gap =0.1*m;
kn = 1e4*N/m;


// Adding material
add material #1 type uniaxial_elastic elastic_modulus =  1*Pa viscoelastic_modulus =  0*Pa*s;

// Adding Nodes 
add node #1 at (0*m,0*m,0*m)     with  3 dofs;
add node #2 at (1*m,0*m,0*m)     with  3 dofs;
add node #3 at (1*m +init_gap,0*m,0*m)   with  3 dofs;
add node #4 at (2*m +init_gap,0*m,0*m)   with  3 dofs;

// Adding Fixities
fix node #1 dofs ux uy uz;
fix node #4 dofs ux uy uz;
fix node #2 dofs uy uz   ;
fix node #3 dofs uy uz   ;

// Adding Truss Elements
add element #1  type truss with nodes (1,2) use material # 1 cross_section = 1*m^2 mass_density =  1*kg/m^3;
add element #2  type truss with nodes (3,4) use material # 1 cross_section = 1*m^2 mass_density =  1*kg/m^3;

// Adding Contact Element
add element #3  type ForceBasedHardContact with nodes (2,3) 
	axial_stiffness =kn
	shear_stiffness =  1e10*Pa*m
	axial_viscous_damping =  0*kN/m*s
	shear_viscous_damping =   0*kN/m*s
	friction_ratio =  0.3   
	contact_plane_vector = (1,0,0);

new loading stage "Adding_Normal_Load";

	add load #1  to node #2  type linear Fx = 0.3*N;

	Nsteps = 100;

	tol = 1e-3;
	define convergence test Norm_Unbalance 
	  tolerance =  tol
	  maximum_iterations = 1000 
	  verbose_level = 4;

	define algorithm Newton;
	define solver UMFPack;

	define load factor increment 1/Nsteps;
	simulate Nsteps steps using static algorithm;

bye;
