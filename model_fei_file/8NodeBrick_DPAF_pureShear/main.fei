model name "GGmax" ;
// Parameters:
phi   = 0.0135713590083;
ha      = 2.94767923453;
cr      = 1854.31984573;

rho=1922.5 ;
depth=0.1524/2;
confinstress=9.8*depth*rho;
G=12388.33;

p0 = confinstress*Pa;
phirad = pi*phi/180;
M = 6*sin(phirad)/(3-sin(phirad));
nu=0.3;
add material # 1 type DruckerPragerArmstrongFrederickLT
    mass_density = rho*kg/m^3 
    elastic_modulus =  2*G*(1+nu)*Pa
    poisson_ratio =  nu
    druckerprager_k = M
    armstrong_frederick_ha = ha*Pa 
    armstrong_frederick_cr = cr*Pa
    isotropic_hardening_rate =  0*Pa
    initial_confining_stress = 10*Pa;
add node #        1 at (   1.0000 *m,   0.0000 *m,  0.0000 *m) with 3 dofs;
add node #        2 at (   0.0000 *m,   1.0000 *m,  0.0000 *m) with 3 dofs;
add node #        3 at (   1.0000 *m,   2.0000 *m,  0.0000 *m) with 3 dofs;
add node #        4 at (   2.0000 *m,   1.0000 *m,  0.0000 *m) with 3 dofs;
add node #        5 at (   1.0000 *m,   0.0000 *m,  1.0000 *m) with 3 dofs;
add node #        6 at (   0.0000 *m,   1.0000 *m,  1.0000 *m) with 3 dofs;
add node #        7 at (   1.0000 *m,   2.0000 *m,  1.0000 *m) with 3 dofs;
add node #        8 at (   2.0000 *m,   1.0000 *m,  1.0000 *m) with 3 dofs;
add element #   1 type 8NodeBrickLT with nodes(1,2,3,4,5,6,7,8) use material # 1; 

// fix the y direction for node 2,4,6,8
fix node # 2 dofs uy ;
fix node # 4 dofs uy ;
fix node # 6 dofs uy ;
fix node # 8 dofs uy ;
// fix the x direction for node  1,3,5,7
fix node # 1 dofs ux ;
fix node # 3 dofs ux ;
fix node # 5 dofs ux ;
fix node # 7 dofs ux ;
// Stage 1: confinement
new loading stage "confinement";
add load # 1 to node # 1 type linear Fy=   p0*m^2; 
add load # 2 to node # 3 type linear Fy= - p0*m^2; 
add load # 3 to node # 5 type linear Fy=   p0*m^2; 
add load # 4 to node # 7 type linear Fy= - p0*m^2;

add load # 5 to node # 2 type linear Fx=   p0*m^2; 
add load # 6 to node # 4 type linear Fx= - p0*m^2; 
add load # 7 to node # 6 type linear Fx=   p0*m^2; 
add load # 8 to node # 8 type linear Fx= - p0*m^2; 

// confinement at z direction
add load # 101 to node # 1 type linear Fz=   p0*m^2; 
add load # 102 to node # 2 type linear Fz=   p0*m^2; 
add load # 103 to node # 3 type linear Fz=   p0*m^2; 
add load # 104 to node # 4 type linear Fz=   p0*m^2;

add load # 105 to node # 5 type linear Fz= - p0*m^2; 
add load # 106 to node # 6 type linear Fz= - p0*m^2; 
add load # 107 to node # 7 type linear Fz= - p0*m^2; 
add load # 108 to node # 8 type linear Fz= - p0*m^2;

// add algorithm and solver
Nsteps=100;
define load factor increment 1/Nsteps;
define solver  ProfileSPD;
define convergence test Norm_Displacement_Increment  
    tolerance =  1e-5
    maximum_iterations =  100
    verbose_level = 4;
// define algorithm With_no_convergence_check ;
define algorithm Newton ;
define NDMaterialLT constitutive integration algorithm Euler_One_Step
    yield_function_relative_tolerance =  0.00002
    stress_relative_tolerance =  0.0002
    maximum_iterations = 1000;
simulate Nsteps steps using static algorithm;
// ------------------------------------------------------------------------
// Stage 2: shear
new loading stage "shear";
// fix all the uz, since we want plane strain.
i=1;
while (i<9) {
    remove load # 100+i ;
    fix node # i dofs uz;
    i=i+1;
};
shearforce=1.6*kN;


add load #  9 to node # 1 type linear Fy= shearforce;// series_file = "path.txt" ; 
add load # 10 to node # 3 type linear Fy=-shearforce;// series_file = "path.txt" ; 
add load # 11 to node # 5 type linear Fy= shearforce;// series_file = "path.txt" ; 
add load # 12 to node # 7 type linear Fy=-shearforce;// series_file = "path.txt" ; 

add load # 13 to node # 2 type linear Fx=-shearforce;// series_file = "path.txt" ; 
add load # 14 to node # 4 type linear Fx= shearforce;// series_file = "path.txt" ; 
add load # 15 to node # 6 type linear Fx=-shearforce;// series_file = "path.txt" ; 
add load # 16 to node # 8 type linear Fx= shearforce;// series_file = "path.txt" ; 

// add algorithm and solver
Nsteps=1e4  ;
define static integrator displacement_control using node # 1 dof uy increment 1e-2/Nsteps*m;
define convergence test Norm_Displacement_Increment tolerance = 0.000001 maximum_iterations = 100 verbose_level = 0;
define solver  ProfileSPD;
define algorithm Newton ;
define NDMaterialLT constitutive integration algorithm Euler_One_Step
    yield_function_relative_tolerance =  0.00002
    stress_relative_tolerance =  0.0002
    maximum_iterations = 1000;  
    
simulate Nsteps steps using static algorithm;
bye;